/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.application.cocooncsr;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

/**
 * This class represents the main login class. This code verifies if the user
 * logged in a registered Cocoon customer service representative
 *
 * @author Arjun
 */
public class CocoonCSRNotesApplication extends javax.swing.JFrame {

    /**
     * Creates new form CocoonCSRNotesApplication
     */
    public CocoonCSRNotesApplication() {
        setupDatabase();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        csrUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        csrPassword = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        loginCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        errorDisplay = new javax.swing.JLabel();
        addnewCSR = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("CSR Username");

        csrUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csrUsernameActionPerformed(evt);
            }
        });

        jLabel2.setText("CSR Password");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        loginCancel.setText("Cancel");
        loginCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginCancelActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("COCOON CSR NOTES ");

        errorDisplay.setForeground(new java.awt.Color(255, 0, 0));

        addnewCSR.setText("ADD NEW CSR");
        addnewCSR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addnewCSRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(csrUsername))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(csrPassword)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(loginCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(addnewCSR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(errorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csrUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(csrPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(addnewCSR, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void csrUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csrUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_csrUsernameActionPerformed
    /**
     * Upon clicking the login button, the username and password is verified
     * against the SQL DB 'cocooncsr', table 'cocouserpass'
     *
     * @param evt
     */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed

        // TODO add your handling code here:
        /**
         * Getting the input parameters (Username and Password)
         */
        userid = csrUsername.getText();
        String pwd = csrPassword.getText();

        /**
         * loading the Properties file in order to get the DB connection
         * parameters
         */
        try {
            /**
             * Specify to the DriverManager which JDBC drivers to try to make
             * Connections with.
             */
            Class.forName(jdbcDriver);

            /**
             * Connecting to the MySQL DB
             */
            try (Connection con = DriverManager.getConnection(sqlDB, dBadminusername, dBadminuserpassword)) {

                /**
                 * Preparing the SQL Statement instance for querying the DB
                 */
                Statement stmt = con.createStatement();

                /**
                 * Selecting the DB consisting of the username and Password
                 */
                stmt.executeQuery("use cocooncsr;");

                /**
                 * Executing the SQL Query
                 */
                ResultSet rspwd = stmt.executeQuery("select cpass from cocouserpass where cuser=\"" + userid + "\"");

                /**
                 * Verifying if the username and password match
                 */
                String csrpass = null;
                while (rspwd.next()) {
                    csrpass = rspwd.getString("cpass");
                }

                if (pwd.contentEquals(csrpass)) {
                    errorDisplay.setText("");
                    System.out.println("Login Sussessful");

                    String cmd = evt.getActionCommand();
                    System.out.println(cmd);
                    /**
                     * If Login is successful, the main options are displayed to
                     * the user
                     */
                    if (cmd.equals("Login")) {
                        dispose();
                        MainOptionFrame moframe = new MainOptionFrame();
                        moframe.setLocationRelativeTo(null);
                        moframe.setVisible(true);
                    }

                } else {
                    System.out.println("Login UnSuccessful");
                    errorDisplay.setText("Login UnSuccessful");
                }

                stmt.close();
                rspwd.close();
                con.close();

            }

        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Exception : " + e);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void setupDatabase() {

        /**
         * loading the Properties file in order to get the DB connection
         * parameters
         */
        try {
            Properties prop = new Properties();
            InputStream input = null;
            try {
                input = new FileInputStream(PROPERTIES_FILE);
                prop.load(input);
            } catch (Exception e) {
                System.out.println("Properties file load Exception" + e);
            }
            sqlDB = prop.getProperty("sqlDB");
            dBadminusername = prop.getProperty("dBadminusername");
            dBadminuserpassword = prop.getProperty("dBadminuserpassword");
            appAdminPassword = prop.getProperty("appAdminPassword");

            /**
             * Specify to the DriverManager which JDBC drivers to try to make
             * Connections with.
             */
            Class.forName(jdbcDriver);

            /**
             * Connecting to the MySQL DB
             */
            try (Connection con = DriverManager.getConnection(sqlDB, dBadminusername, dBadminuserpassword)) {

                /**
                 * Preparing the SQL Statement instance for querying the DB
                 */
                Statement stmt = con.createStatement();

                /**
                 * Creating the main DB
                 */
                //stmt.executeUpdate("CREATE DATABASE cocooncsr;");
                
                /**
                 * Using the created DB
                 */
                stmt.execute("use cocooncsr;");

                /**
                 * Creating the CSR Username Password Table
                 */
                stmt.execute("create table if not exists cocouserpass(cuser varchar(10) not null, cpass varchar(10) not null);");

                /**
                 * Creating the Customer Data Table
                 */
                stmt.execute("create table if not exists cococustdata(\n"
                        + "notecount int unsigned not null auto_increment primary key,\n"
                        + "date timestamp,\n"
                        + "cocooncsr varchar(10) not null,\n"
                        + "title varchar(4) not null,\n"
                        + "firstname nvarchar(20) not null,\n"
                        + "lastname nvarchar(20) not null,\n"
                        + "notes varchar(300) not null\n"
                        + ");");

                /**
                 * setting up default administrator login and password for
                 * application only if there has been no entry in the DB
                 * previously
                 */
                ResultSet res = stmt.executeQuery("SELECT COUNT(*) FROM cocouserpass");
                int entrycount = 0;
                while (res.next()) {
                    entrycount = res.getInt("COUNT(*)");
                }
                System.out.println("entry count " + entrycount);

                if (entrycount < 1) {
                    stmt.execute("insert into cocouserpass value ('" + "admin" + "', '" + appAdminPassword + "');");
                }
                /**
                 * Closing DB
                 */
                stmt.close();
                con.close();
            }
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Exception : " + e);
        }
    }

    /**
     * If Cancel is selected the username and password are reset
     *
     * @param evt
     */
    private void loginCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginCancelActionPerformed
        // TODO add your handling code here:
        csrUsername.setText(null);
        csrPassword.setText(null);
    }//GEN-LAST:event_loginCancelActionPerformed

    /**
     * If Add New Customer representative is chosen the the administrator would
     * be able to add a new representative by populating the relevant
     * administrator credentials
     *
     * @param evt
     */

    private void addnewCSRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addnewCSRActionPerformed
        // TODO add your handling code here:
        dispose();
        AdminLogin adminframe = new AdminLogin();
        adminframe.setLocationRelativeTo(null);
        adminframe.setVisible(true);
    }//GEN-LAST:event_addnewCSRActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CocoonCSRNotesApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CocoonCSRNotesApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CocoonCSRNotesApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CocoonCSRNotesApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CocoonCSRNotesApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addnewCSR;
    private javax.swing.JTextField csrPassword;
    private javax.swing.JTextField csrUsername;
    private javax.swing.JLabel errorDisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton loginCancel;
    // End of variables declaration//GEN-END:variables
    public static String userid;
    public static String sqlDB;
    public static String dBadminusername;
    public static String dBadminuserpassword;
    public static String appAdminPassword;
    private static final String PROPERTIES_FILE = System.getProperty("user.dir")
            + "\\src\\com\\application\\cocooncsr\\properties\\csrAppProperties.properties";
    private static String jdbcDriver = "com.mysql.jdbc.Driver";
}
