/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.application.cocooncsr;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * The purpose of this class is to display result data in the form of tables 
 * @author Arjun
 */
public class FullCustomerData extends javax.swing.JFrame {

    /**
     * Creates new form FullCustomerData
     */
    public FullCustomerData() {
        initComponents();
        table = new JTable();
        createTable();
    }

    /**
     * Constructor with csrID as parameter for displaying search based on csrID
     *
     * @param csrID
     */
    FullCustomerData(String csrID) {
        initComponents();
        table = new JTable();
        createTable(csrID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fcd = new javax.swing.JTable();
        backbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fcd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "CSR ID", "First Name", "Last Name", "Notes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(fcd);

        backbutton.setText("Back");
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(366, 366, 366)
                .addComponent(backbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed
        // TODO add your handling code here:
        dispose();
        MainOptionFrame moframe = new MainOptionFrame();
        moframe.setLocationRelativeTo(null);
        moframe.setVisible(true);
    }//GEN-LAST:event_backbuttonActionPerformed
    /**
     * Creating a Table for displaying Results
     */
    private void createTable() {
        /**
         * Selecting the Default Table Model and creating an instance
         */
        DefaultTableModel model;
        model = new DefaultTableModel();
        /**
         * Adding the columns for the Table
         */
        model.addColumn("Date");
        model.addColumn("CSR ID");
        model.addColumn("Title");
        model.addColumn("First Name");
        model.addColumn("Last Name");
        model.addColumn("Notes");

        try {
            /**
             * Specify to the DriverManager which JDBC drivers to try to make
             * Connections with.
             */
            Class.forName("com.mysql.jdbc.Driver");
            /**
             * Connecting to the SQL DB
             */
            try (Connection con = DriverManager.getConnection(CocoonCSRNotesApplication.sqlDB, CocoonCSRNotesApplication.dBadminusername, CocoonCSRNotesApplication.dBadminuserpassword)) {
                Statement stmt = con.createStatement();
                /**
                 * Selecting the DB
                 */
                stmt.executeQuery("use cocooncsr;");
                /**
                 * Populating Result set with all customer data regardless of
                 * the CSR ID
                 */
                ResultSet rs = stmt.executeQuery("select * from cococustdata");
                /**
                 * selecting the result set one row at a time and populating the
                 * table
                 */
                while (rs.next()) {
                    Object[] rowArray = new Object[6];
                    rowArray[0] = rs.getTimestamp(2);
                    rowArray[1] = rs.getString(3);
                    rowArray[2] = rs.getString(4);
                    rowArray[3] = rs.getString(5);
                    rowArray[4] = rs.getString(6);
                    rowArray[5] = rs.getString(7);

                    model.addRow(rowArray);
                }

                stmt.close();
                /**
                 * Closing the Result Set
                 */
                rs.close();
                /**
                 * Closing the DB
                 */
                con.close();

            }
            // Setting the model
            fcd.setModel(model);

        } catch (ClassNotFoundException | SQLException e) {
        }
        /**
         * Setting the default close operation
         */
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        /**
         * setting the size of the result. Larger than others to accomodate the
         * table
         */
        setSize(1024, 768);
        setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FullCustomerData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FullCustomerData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FullCustomerData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FullCustomerData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FullCustomerData().setVisible(true);

            }
        });
    }
    private JTable table;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbutton;
    private javax.swing.JTable fcd;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
/**
     * Creating a table when a CSR ID has been provided as a search criteria
     *
     * @param csrID
     */
    private void createTable(String csrID) {
        /**
         * Selecting the Default Table Model and creating an instance
         */
        DefaultTableModel model;

        model = new DefaultTableModel();
        /**
         * Adding the columns for the Table
         */
        model.addColumn("Date");
        model.addColumn("CSR ID");
        model.addColumn("Title");
        model.addColumn("First Name");
        model.addColumn("Last Name");
        model.addColumn("Notes");

        try {
            /**
             * Specify to the DriverManager which JDBC drivers to try to make
             * Connections with.
             */
            Class.forName("com.mysql.jdbc.Driver");
            /**
             * Connecting to the MySQL DB
             */
            try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cocooncsr", "root", "root")) {
                /**
                 * Preparing the SQL Statement instance for querying the DB
                 */
                Statement stmt = con.createStatement();
                /**
                 * Selecting the relevant DB
                 */
                stmt.executeQuery("use cocooncsr;");
                /**
                 * Selecting data based on csrID and populating the data on
                 * reverse chronological order
                 */
                ResultSet rs = stmt.executeQuery("select * from cococustdata where cocooncsr = '" + csrID + "' order by date desc;");

                while (rs.next()) {
                    Object[] rowArray = new Object[6];
                    rowArray[0] = rs.getTimestamp(2);
                    rowArray[1] = rs.getString(3);
                    rowArray[2] = rs.getString(4);
                    rowArray[3] = rs.getString(5);
                    rowArray[4] = rs.getString(6);
                    rowArray[5] = rs.getString(7);

                    model.addRow(rowArray);
                }

                stmt.close();
                rs.close();
                /**
                 * close DB
                 */
                con.close();

            }
            fcd.setModel(model);
            // this.add(table);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(1024, 768);
        setVisible(true);

    }
}
